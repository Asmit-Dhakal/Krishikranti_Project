
class SellerProductView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        try:
            seller = Seller.objects.get(user=request.user)
        except Seller.DoesNotExist:
            return Response({'error': 'Seller not found'}, status=status.HTTP_404_NOT_FOUND)


        products = Product.objects.filter(seller=seller)

        if not products.exists():
            return Response({'error': 'No products found'}, status=status.HTTP_404_NOT_FOUND)
        serializer = ProductSerializer(products, many=True)
        return Response(serializer.data)

    def post(self, request):
        try:
            seller = Seller.objects.get(user=request.user)
        except Seller.DoesNotExist:
            return Response({'error': 'Seller not found'}, status=status.HTTP_404_NOT_FOUND)

        serializer = ProductSerializer(data=request.data)
        if serializer.is_valid():
            product = serializer.save(seller=seller)
            response_data = {
                'message': 'Product successfully added',
                'product': ProductSerializer(product).data
            }
            return Response(response_data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def put(self, request, pk):
        try:
            product = Product.objects.get(pk=pk, seller__user=request.user)
        except Product.DoesNotExist:
            return Response({'error': 'Product not found or not owned by this seller'},
                            status=status.HTTP_404_NOT_FOUND)

        serializer = ProductSerializer(product, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk):
        try:
            product = Product.objects.get(pk=pk, seller__user=request.user)
        except Product.DoesNotExist:
            return Response({'error': 'Product not found or not owned by this seller'},
                            status=status.HTTP_404_NOT_FOUND)

        product.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)


class SellerRegistrationView(APIView):
    def post(self, request):
        # Check if a seller already exists for the current user
        if Seller.objects.filter(user=request.user).exists():
            return Response({'error': 'Seller already exists for this user'}, status=status.HTTP_400_BAD_REQUEST)

        # Create a new seller
        serializer = SellerSerializer(data=request.data)
        if serializer.is_valid():
            seller = serializer.save(user=request.user)
            return Response(SellerSerializer(seller).data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def get(self, request):
        try:
            seller = Seller.objects.get(user=request.user)
            serializer = SellerSerializer(seller)
            return Response(serializer.data)
        except Seller.DoesNotExist:
            return Response({'error': 'Seller not found'}, status=status.HTTP_404_NOT_FOUND)








import uuid

from django.db import models
from django.contrib.auth.models import User
from django.db.models import OrderBy
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from products.models import Product


class Cart(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    ordered = models.BooleanField(default=False)
    total_price = models.FloatField(default=0.0)

    def __str__(self):
        return f"{self.user.username} - {self.total_price}"

class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name='items')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    price = models.FloatField(default=0.0)
    isOrder = models.BooleanField(default=False)
    quantity = models.IntegerField(default=1)

    def __str__(self):
        return f"{self.user.username} - {self.product.product_name} ({self.quantity})"

    def save(self, *args, **kwargs):
        self.price = self.quantity * self.product.product_price
        super().save(*args, **kwargs)

@receiver(post_save, sender=CartItem)
@receiver(post_delete, sender=CartItem)
def update_cart_total(sender, instance, **kwargs):
    cart = instance.cart
    cart.total_price = sum(item.price for item in cart.items.all())
    cart.save()


class Order(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)
    amount = models.FloatField(default=0.0)
    is_Paid = models.BooleanField(default=False)
    order_id = models.CharField(max_length=100, unique=True)
    payment_id = models.CharField(max_length=100)
    payment_signature= models.CharField(max_length=100, blank=True)
    payment_transaction = models.OneToOneField('PaymentTransaction', on_delete=models.CASCADE, related_name='order')



    def __str__(self):
        return f"Order {self.order_id} by {self.user.username}"


class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='order_items')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.IntegerField(default=1)
    price = models.FloatField(default=0.0)

    def __str__(self):
        return f"{self.order.order_id} - {self.product.product_name} ({self.quantity})"

class PaymentTransaction(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='payment_transactions')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    amount = models.FloatField()
    payment_method = models.CharField(max_length=50)  # e.g., 'credit_card', 'paypal', etc.
    transaction_id = models.CharField(max_length=100, unique=True)
    payment_status = models.CharField(max_length=20, choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')])
    created_at = models.DateTimeField(auto_now_add=True)


    def __str__(self):
        return f"Transaction {self.transaction_id} for {self.order}"

    def save(self, *args, **kwargs):
        if not self.transaction_id:
            self.transaction_id = uuid.uuid4().hex
        super().save(*args, **kwargs)


